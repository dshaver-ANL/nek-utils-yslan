c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set up initial conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer ix,iy,iz,eg
      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set up initial conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer ix,iy,iz,eg
      qvol   = 0.0
      source = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set up initial conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer ix,iy,iz,eg

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up initial conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,iside,eg,ie

      ie = gllel(eg)
      ux   = 1.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0
      flux = 1.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer ix,iy,iz,eg

      ux   = 1.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()
      include 'SIZE'
      include 'TOTAL'

c      param(40) = 2     ! hypre boomer amg
c      param(22) = 1.e-6 ! Helmholtz tolerance

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      real ginfo(2)

      ifxyo = .true.
      call outpost(vx,vy,vz,pr,t,'bfr')

      nlyr = 3   ! numbers of the layers from bdry
      itype = 1  ! for future extension

      ! axis of the cylinder, assume along z axis
      ginfo(1) = 0.0 ! x coord
      ginfo(2) = 0.0 ! y coord

      call fix_bdry('W  ',itype,ginfo,nlyr) ! boundary layers on 'W  ' bdry

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'

      call outpost(vx,vy,vz,pr,t,'aft')
      call exitt

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine fix_bdry(cbc3,itype,ginfo,nlyr)
      implicit none
      include 'SIZE'
      include 'TOTAL'
      character*3 cbc3
      integer nlyr,itype

      real tmp(lx1,ly1,lz1,lelv),ginfo(2)

      integer fopp(6),ix_fctr(6),iy_fctr(6),iz_fctr(6),idd
      integer f_to_eid_3d(4,6)
      parameter(idd=ldim-1)
      data fopp /3,4,1,2,6,5/

      data ix_fctr /  2,lx1,  2,  1,  2,  2/
      data iy_fctr /  1,  2,ly1,  2,  2,  2/
      data iz_fctr /idd,idd,idd,idd,  1,lz1/

      data f_to_eid_3d / 1, 6, 9, 5,
     $                   2, 7,10, 6,
     $                   3, 8,11, 7,
     $                   4, 5,12, 8,
     $                   1, 2, 3, 4,
     $                   9,10,11,12 /

      integer e,f,ix,iy,iz,i,n,iside,ilv
      integer iix,iiy,iiz
      integer kx1,kx2,ky1,ky2,kz1,kz2
      real rad,xx,yy,xref,yref,dist2d,radmn,radmx

      if (lx1.lt.3) then
        if(nio.eq.0) write(*,*)'WARN: fix_bdry needs lx1>=3'
        return
      endif

      xref = ginfo(1)
      yref = ginfo(2)

      n = lx1*ly1*lz1*nelv
      call rzero(tmp,n)

      do e=1,nelv
      do f=1,2*ldim
        if (cbc(f,e,1).eq.cbc3) then
          call facev(tmp,e,f,1.0,lx1,ly1,lz1)
          call facev(tmp,e,fopp(f),1.0,lx1,ly1,lz1)
        endif
      enddo
      enddo
      call dssum(tmp,lx1,ly1,lz1)

      do ilv=2,nlyr
        do e=1,nelv
        do f=1,2*ldim
          ix = ix_fctr(f)
          iy = iy_fctr(f)
          iz = iz_fctr(f)
          if (tmp(ix,iy,iz,e).gt.0.0) then
            call facev(tmp,e,f,1.0,lx1,ly1,lz1)
            call facev(tmp,e,fopp(f),1.0,lx1,ly1,lz1)
          endif          
        enddo
        enddo
        call dssum(tmp,lx1,ly1,lz1)
      enddo

      do e=1,nelv
      do f=1,2*ldim
        ix = ix_fctr(f)
        iy = iy_fctr(f)
        iz = iz_fctr(f)
        
        if (tmp(ix,iy,iz,e).gt.0.0) then ! do this f

          ! get rad
          radmn= 1.E10
          radmx=-1.E10
          call facind (kx1,kx2,ky1,ky2,kz1,kz2,2,2,2,f)
          do 100 iz=kz1,kz2
          do 100 iy=ky1,ky2
          do 100 ix=kx1,kx2
             iix = (ix-1)*(lx1-1)+1
             iiy = (iy-1)*(ly1-1)+1
             iiz = (iz-1)*(lz1-1)+1
             xx = xm1(iix,iiy,iiz,e)
             yy = ym1(iix,iiy,iiz,e)
             rad = dist2d(xx,yy,xref,yref)
             radmn=min(radmn,rad)
             radmx=max(radmx,rad)
  100     continue
          if(radmx-radmn.gt.1e-3) 
     $      write(*,*)'cyl diff rad is large',lglel(e),f,radmn,radmx

          rad = 0.5*(radmn+radmx)
          if (ldim.eq.2) then
            if(f.eq.4) rad = -rad
            iside = f
            ccurve(iside,e) = 'C'
            curve(1,iside,e) = rad
          else
            if(f.eq.4.OR.f.eq.8) rad = -rad   ! Nek is so wierd...
            do i=1,4
              iside = f_to_eid_3d(i,f)
              ccurve(iside,e) = 'C'
              curve(1,iside,e) = rad
            enddo
          endif
        endif
      enddo
      enddo

      call genxyz (xm1,ym1,zm1,lx1,ly1,lz1)

      return
      end
